program: compound_statement
compound_statement: BEGIN statement_list END
statement_list: statement | statement SEMI statement_list
statement: compound_statement | assignment_statement | method_call | condition_statement | cycle_statement |
                                            | thread | empty
method_call: variable DOT method_name LPAREN arg RPAREN
method_name: str
function: DEF name LPAREN var_declaration RPAREN COLON compound_statement
empty: PASS
assignment_statement: variable ASSIGN expr
expr: cond((EQUAL|LESS|GREAT) term)*
cond: term((PLUS|MINUS) term)*
term: factor((MUL|DIV) factor)*
factor: PLUS factor |
        MINUS factor |
        NUM |
        str |
        list |
        BOOL |
        LPAREN expr RPAREN |
        variable|
        method_call
print: PRINT expr

variable: ID

list: item | item COMMA list
item: expr

condition_statement: IF LPAREN expr RPAREN LBRANCH statement_list RBRANCH |
                     IF LPAREN expr RPAREN LBRANCH statement_list RBRANCH ELSE RBRANCH statement_list LBRANCH

cycle_statement: (while | for)

while: WHILE LPAREN expr RPAREN LBRANCH statement_list RBRANCH

for: FOR LPAREN assigment_statement SEMI expr SEMI assigment_statement RPAREN

thread: THREAD LPAREN str RPAREN LBRACKET compound_statement RBRACKET

str: STR text STR